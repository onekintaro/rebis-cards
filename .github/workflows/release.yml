name: Build & Release

on:
  push:
    branches: [ main ]
    paths:
      - "package.json"
      - "src/**"
      - "vite.config.*"
      - "rollup.config.*"
      - "tsconfig.*"
      - "package-lock.json"
      - "pnpm-lock.yaml"
      - "yarn.lock"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    # ðŸŸ£ Exportiere die Version als Job-Output:
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build (writes src/version.ts from package.json via prebuild)
        run: npm run build

      - name: Read version
        id: ver
        run: echo "version=$(npm pkg get version | tr -d '\"')" >> $GITHUB_OUTPUT

      - name: Check bundle exists & is sane
        run: |
          test -f dist/rebis-cards.js || (echo "dist/rebis-cards.js fehlt" && exit 1)
          BYTES=$(wc -c < dist/rebis-cards.js)
          test "$BYTES" -gt 2000 || (echo "Bundle zu klein ($BYTES B) â†’ vermutlich kaputt" && exit 1)

      - name: Generate checksums
        run: |
          cd dist
          sha256sum rebis-cards.js > rebis-cards.js.sha256
          sha256sum rebis-cards.js.map > rebis-cards.js.map.sha256 || true

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # ðŸŸ£ Version aus build-Job holen
      - name: Get version
        id: ver
        run: echo "version=${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT

      # ðŸŸ£ Guard â€“ brich ab, wenn leer
      - name: Guard: version must not be empty
        run: |
          if [ -z "${{ steps.ver.outputs.version }}" ]; then
            echo "Version from build job is empty. Check build.outputs.version." >&2
            exit 1
          fi

      - name: Tag exists? (remote)
        id: tagcheck
        env:
          REPO: ${{ github.repository }}
          VER:  v${{ needs.build.outputs.version }}   # ðŸŸ£ hier jetzt korrekt
        run: |
          if git ls-remote --tags "https://github.com/${REPO}.git" "refs/tags/${VER}" | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect sourcemap
        id: hasmap
        run: |
          if [ -f dist/rebis-cards.js.map ]; then
            echo "map=dist/rebis-cards.js.map" >> $GITHUB_OUTPUT
          else
            echo "map=" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.tagcheck.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}                # ðŸŸ£ nie wieder nur "v"
          name: Rebis Cards v${{ steps.ver.outputs.version }}
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: true
          files: |
            dist/rebis-cards.js
            ${{ steps.hasmap.outputs.map }}
            dist/rebis-cards.js.sha256
            dist/rebis-cards.js.map.sha256
